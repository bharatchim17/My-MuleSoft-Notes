---------------------------------------------------------------------------------------------
//Anypoint platform capabilities:-
Anypoint platform is web application ,a graphical user interface allows us to do cloud
 operations on deployed mule applications..

//CONTROL PLANE 

1. Anypoint Design Centre:-
  - Flow Designer
  - API Designer
  - Visual API Designer   

2. Anypoint Management Centre:-
   - Runtime Manager
   - API Manager
   - Access Management
   - Analytics

3. Anypoint Exchange:-
    - Exchange portal

* RUNTIME PLANE 
4. runtime engine
5. Anypoint Connectors
6. Runtimes Services

---------------------------------------------------------------------------------------
Organization:-      TATA
      |
      |
Business groups:-   1.TATA Motors  2.TATA Steel   3.TATA Motors
      |
      |
Environments:-      1.Development   2.Quality-Assurance  3.Production

//API's are individual to each Business group , they can't be accessd one from another.
----------------------------------------------------------------------------------------

//RAML Terminology:-

1.REST API URL :-
 http://localhost:8081/Domain_Name/v1/cases
    
    here: 
    Base URI :-  http://localhost:8081/Domain_Name
    Resource :- v1/cases

2.HTTP Methods :-
GET, POST, PUT, DELETE

3.Input :-
headers , body

4.Content type :-
application/json, application/xml

5.Response headers:-
200 OK , 400 Bad Reqest , 500 Server Error

6.Response body :-
application/json , application/xml
-----------------------------------------------------------------------------------------
//RAML is a language for the definition of HTTP-based APIs that embody most or all 
of the principles of Representational State Transfer (REST).
RAML is a human & machine-readable language for the definition of a RESTful 
application programming interface (API).

This document is organized as follows:-
-Basic Information
-Data Types
-Resources
-Methods
-Responses
-Resource Types and Traits
-Security
-Annotations
-Includes, Libraries, Overlays, and Extensions
------------------------------------------------------------------------------------------------

//A template URI refers to a URI parameter, which is a variable element, enclosed 
in curly brackets ({}) inside a relative URI of a resource.

//title:- Label for the API.

//version:- API version

//baseUri:-  baseUri node specifies a URI as an identifier for the API as a whole.

//baseUriParameters:- The baseUriParameters node has the same semantics and therefore
 MUST follow the same structure as the uriParameters.

//protocols:-  [ HTTP, HTTPS ]

//mediaType:- it's Default Media Types for example:- [ application/json , application/xml ]  --or--  application/json


//traits:- A trait, like a method, can provide method-level nodes such as a description,
 headers, query string parameters, and responses. 


//annotationTypes:-  Annotation types, like data types, can extend other data types,
 but annotation types themselves can neither be extended nor used 
 anywhere data types can be used.

(annotationName):-  An annotation is a map having a key that wrap in parentheses() 
is the annotation name, and the value is an instance of that annotation.

//securitySchemes:- Most REST APIs have one or more mechanisms to secure data access, 
identify requests, and determine access level and data visibility.
Whenever we develop a REST_service we apply Security on top of rest APIs.
Security can achieve in several ways, among that we use cofigure SQL certificates on mobile ,
applications or either individually through application or through muleSoft runtime dedicated load
balancer , so that those services will be exposed as HTTPS services.
Apart from that, we also apply security policies on top of these APIs.
Those are like basic authentification, client ID enforcement(injected through headers)
and oAuth security policies.

RAML supports the following built-in security scheme types:-	
OAuth 1.0
OAuth 2.0	
Basic Authentication	
Digest Authentication	
Pass Through	
x-{other}


securedBy:- The value assigned to the securedBy node MUST be a list of any of the 
security schemes previously defined in the securitySchemes.

//uses:- Imported external libraries for use within the API.

//relativeUri:- The resources of the API, identified as relative URIs that begin with a slash (/).
A resource node is one that begins with the slash and is either at the root of the API definition or a child of a resource node. For example, /users and /{groupId}.


//description:- Human-friendly description of the API.

//schemas:-  An alias for the equivalent "types" node for compatibility with RAML 0.8 , always use types ..
-------------------------------------------------------------------------------------------------
//What are fragments in RAML?
fragment is part of root_file itself isn't a complete RAML specification just part(branch) of it..
These fragments can be data types, traits, resource categories, and many others.
 API fragments are reusable components of RAML to make the Design and build 
of reusable API even quicker and easier.

API Fragments:- has two types
1. Local
2. Global 
-------------------------------------------------------------------------------------------
//What is datatype..?
A data type describes the data expected in an API or returned by the API..
Datatype describes data in an API and add rules to validate data against type declaration..
there are two types of datatype 1. built-in datatype 2. custom data types
--------------------------------------------------------------------------------------
//What are facets in RAML?
Types can define two types of members: properties and facets. Both are inherited. 
Properties are regular, object oriented properties. Facets are special configurations. You specialize types based on characteristics of facet values.
use for adding some constraints/special configuration..

Common facets for all type declarations:
-  default , description , enum , example

Some are specific to type:
- Object:  properties , minProperties , maxProperties etc
- Array:   uniqueItems , minItems , maxItems
- String:  pattern , minlength , maxlength 
- integer: minimum , maximum , format , multipleOf

//enum facet used to specify the possible values for the room type..
---------------------------------------------------------------------------------------

//Mocking service:-
is for to simulate behavior of API specification and explore API, tested by using test link or public link
and then we get response as http code , example..
-----------------------------------------------------------------------------------
//Documentation: is reference guide for the API , Such documents can clarify how
 the API works or provide technical , functional and business context it define 
how API works and it contains title & content..
----------------------------------------------------------------------------------
//Anypoint-Exchange:- is repository which provides all Connectors to muleSoft.
//Templates:- are reusable project structures , we can create applications by using Templates.

//API-Life-Cycle:-
 
                      Design
                        |
                        |
                    Development
                        |
                        |
                    Manual Unit Testing
                        |
                        |
                    Munit-Testing
                        |
                        |
                    Manual Deployment
                        |
                        |
                    CICD Deployment 
                        |
                        |
                    API Management
------------------------------------------------------------------------------------------
 
//Q. List different types of api ..?
//Q. What is stateless ..?
//Q. What is idompotent ..?

//Design principles of REST APIs 
- HTTP as application protocol
- resource Based 
- representation
- uniform interface
- stateless

//resources
- Nouns
it's resource based rather than action based (that's why not to write it like getBus , getHotel etc)
resources has two types:  1.Collection(plural)  2.Nested(singular)..
//what is differece between collection resource and Nested resource ?
In collection resource delete methode avoided in majority projects , in nested methode delete methode use in uri parameter

resource representation can be in different formats - XML , JSON etc , representations exchanged between consumer and provider..

//MediaType has two types:  1. Default  2. explicit 
--------------------------------------------------------------------------------------------
//What is HATEOS?

//Q. What is Representational ?
--> Is response return by server to client can be reprent in format like json format {} or xml format <>

//Q. What is State? Does it mean session State?
state of resources in particular time

//resources are held by server
WebClient(browser)----request(product/1)----->WebServer
WebServer-------response{product1: milk}------>WebClient

//What is Web?
is interconnected networks

//What is an API?
Application programming interface

//What is web server? Why we need it?
ex: IIS 
To handle , interprete the request and then it responses it back.. 

//SOAP is a protocol REST is an architectural style. SOAP stands for Simple Object 
Access Protocol. REST stands for REpresentational State Transfer.
---------------------------------------------------------------------------------------