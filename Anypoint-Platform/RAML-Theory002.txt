
------------------------------------------------------------------------------------------------

//Request contains:
        - body
        - headers
        - mediaType
        - uri_parameters
        - query_parameters
//request body must be required in post and patch method it not required in get and delete methode..

//Response contains:
        - HTTP status code
        - mediaType
        - body
        - headers
//response body not required in post and patch methode  it's required in get and delete methode but we can use anyway..
----------------------------------------------------------------------------------------------
https://testfully.io/blog/http-methods/

1xx information:
    - 100 continue
    - 101 switching protocols
    - 102 processing (webDAV)

2xx success:
    - 200 Ok (The request was a success)
    - 201 created (A new resource was successfully created)
    - 202 accepted
    - 203 Non-authoritive information
    - 204 No Content
    - 205 reset content

3xx redirection:
    - 300 multiple choices
    - 301 moved permanently 
    - 302 found
    - 303 see others
    - 304 not modified
    - 305 use proxy

4xx client-error:
    - 400 bad request / request validation error (The server could not understand the request. The request needs to be modified before re-sending it)..

    - 401 unauthorized/Access denid (The request’s authentication is either missing or incorrect)
    - 402 payment required
    - 403 forbidden(The request’s authentication succeeded, but the user does not have access to the resource)
    - 404 resource not found
    - 405 method not found/allowed

5xx server-error:
- 500 internal server error (The server encountered an error)..
- 501 not implemented
- 502 bad gateway
- 503 service unavilable
- 504 gateway timeout
- 505 http version not supported

----------------------------------------------------------------------------------------
//Request Headers has two types:
1. Accept       ---e.g.-->  GET(collection and nested resources) / DELETE(nested resources)
2. Content-type ---e.g.-->  POST(collection resources) / PATCH(nested resources)

//Response Headers has two types:
1. Content-type  ---e.g.-->  GET(collection and nested resources) / DELETE(nested resources)
2. Location     ---e.g.-->  POST(collection resources) 

We use Error-response as content-type in project * as per requirement

--------------------------------------------------------------------------------------------
//displayName: human friendly name
//discription: human friendly description
displayName , discription are common facets of datatype use for resource and Nested 
resource also, for the methods like get , patch , put , post , delete.
-----------------------------------------------------------------------------------------
//resourceTypes:-  A resource type  is collection-type resource can be defined and then
applied to multiple resources..

 //Reserved parameter
 1. resourcePath :  /hotels or /hotels/{hotelId} (same as in uri)
 2. resourcePathName:  /hotels or /hotels/{hotelId} for this resourcePath name will
  be just hotel..
 Double angle brackets enclosed parameter name in resourceTypes.. Double angle brackets<<>> 
In case of user defined parameters it need to have set value of parameter..
<<resourcePathName | !uppercamelcase | !singularize>>

//Resource can specify:
- Methods
- displayName
- Description
- security Schemes
 ----------------------------------------------------------------------------------------
 //Traits can specify:
 - displayName
 - description
 - headers (correlation-id , transaction-id)..
 - query parameters
 - body
 - response etc.


//Reserved parameters:
1. resourcePath:  /hotels or /hotels/{hotelId} (same as in uri)
2. resourcePathName:  /hotels or /hotels/{hotelId} for this resourcePath name will be just hotel..
3. methodName:  
- User defined parameters

we can apply Traits to methods in resource and resource Types..
--------------------------------------------------------------------------------------------
//What is RAML..?
- RAML is RESTful API Modeling language..
- is YAML-based language..
-------------------------------------------------------------------------------------------------------
//Library:
RAML library are used to combine any collection of data type,traits,security_Schemes declarations
into modular , externalized , reusable groups.. 
------------------------------------------------------------------------------------
//Stable state: is ready to be consumed. The asset cannot be republished or overwritten.
//Deprecated state: is similar to an asset version in the stable state.
The only difference is that the status property shows the asset version is deprecated.