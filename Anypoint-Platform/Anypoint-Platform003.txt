//Anypoint-Exchange:- is repository which provides all Connectors to muleSoft.
//Templates:- are reusable project structures , we can create applications by using Templates.

//API-Life-Cycle:-
 
                      Design
                        |
                        |
                    Development
                        |
                        |
                    Manual Unit Testing
                        |
                        |
                    Munit-Testing
                        |
                        |
                    Manual Deployment
                        |
                        |
                    CICD Deployment 
                        |
                        |
                    API Management
----------------------------------------------------------------
 
//Q. List different types of api ..?
//Q. What is stateless ..?
//Q. What is idompotent ..?

//Design principles of REST APIs 
- HTTP as application protocol
- resource Based 
- representation
- uniform interface
- stateless

//resources
- Nouns
it's resource based rather than action based (that's why not to write it like getBus , getHotel etc)
resources has two types:  1.Collection(plural)  2.Nested(singular)..
//what is differece between collection resource and Nested resource ?
In collection resource delete methode avoided in majority projects , in nested methode delete methode use in uri parameter

resource representation can be in different formats - XML , JSON etc , representations exchanged between consumer and provider..

//MediaType has two types:  1. Default  2. explicit 
------------------------------------------------------------------------

//Request contains:
        - body
        - headers
        - mediaType
        - uri_parameters
        - query_parameters
//request body must be required in post and patch method it not required in get and delete methode..

//Response contains:
        - HTTP status code
        - mediaType
        - body
        - headers
//response body not required in post and patch methode  it's required in get and delete methode but we can use anyway..
----------------------------------------------------------------------------------------------
1xx information:
    - 100 continue
    - 101 switching protocols
    - 102 processing (webDAV)

2xx success:
    - 200 Ok 
    - 201 created
    - 202 accepted
    - 203 Non-authoritive information
    - 204 No Content
    - 205 reset content

3xx redirection:
    - 300 multiple choices
    - 301 moved permanently 
    - 302 found
    - 303 see others
    - 304 not modified
    - 305 use proxy

4xx client-error:
    - 400 bad request / request validation error
    - 401 unauthorized/Access denid
    - 402 payment required
    - 403 forbidden
    - 404 resource not found
    - 405 method not found/allowed

5xx server-error:
- 500 internal server error
- 501 not implemented
- 502 bad gateway
- 503 service unavilable
- 504 gateway timeout
- 505 http version not supported

-----------------------------------------------------------------------
//Request Headers has two types:
1. Accept       ---e.g.-->  GET(collection and nested resources) / DELETE(nested resources)
2. Content-type ---e.g.-->  POST(collection resources) / PATCH(nested resources)

//Response Headers has two types:
1. Content-type  ---e.g.-->  GET(collection and nested resources) / DELETE(nested resources)
2. Location     ---e.g.-->  POST(collection resources) 

We use Error-response as content-type in project * as per requirement

------------------------------------------------------------------------------------
//displayName: human friendly name
//discription: human friendly description
displayName , discription are common facets of datatype use for resource and Nested 
resource also, for the methods like get , patch , put , post , delete.
---------------------------------------------------------------------------------
//resourceTypes:-  A resource type , can specify security schemes,
 methods, displayName and discription..
 //Reserved parameter
 1. resourcePath :  /hotels , /hotels/{hotelId} same as in uri
 2. resourcePathName:  hotels (/hotels/{hotelId} for this resourcePath name will
  be just hotel)..
 Double angle brackets enclosed parameter name in resourceTypes.. Double angle brackets<<>> 
In case of user defined parameters it need to have set value of parameter..

//Resource can specify:
- Methods
- Description
- displayName
- security Schemes
 ------------------------------------------------------------------------------
 //Traits can specify:
 - description
 - headers
 - query parameters
 - body
 - response etc.

//Reserved parameters:
 1. resourcePath :  /hotels , /hotels/{hotelId} same as in uri
 2. resourcePathName:  hotels (/hotels/{hotelId} for this resourcePath name will)
 3. methodName:  
- User defined parameters
--------------------------------------------------------------------------------------------
//What is RAML..?
- RAML is RESTful API Modeling language..
- is powerful language YAML-based language..
------------------------------------------------
