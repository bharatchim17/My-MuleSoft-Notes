---------------------------------------------------------------------------------------------
//Anypoint platform capabilities:-
Anypoint platform is web application ,a graphical user interface allows us to do cloud
 operations on deployed mule applications..

* CONTROL PLANE 
1. Anypoint Design Centre:-
  - Flow Designer
  - API Designer
  - Visual API Designer   

2. Anypoint Management Centre:-
   - Runtime Manager
   - API Manager
   - Access Management
   - Analytics

3. Anypoint Exchange:-
    - Exchange portal

* RUNTIME PLANE 
4. runtime engine
5. Anypoint Connectors
6. Runtimes Services

----------------------------------------------------------------------------------
Organization:-      TATA
      |
      |
Business groups:-   1.TATA Motors  2.TATA Steel   3.TATA Motors
      |
      |
Environments:-      1.Development   2.Quality-Assurance  3.Production

//API's are individual to each Business group , they can't be accessd one from another.
----------------------------------------------------------------------------------------

//RAML Terminology:-

1.REST API URL :-
 http://localhost:8081/Domain_Name/v1/cases
    
    here: 
    Base URI :-  http://localhost:8081/Domain_Name
    Resource :- v1/cases

2.HTTP Methods :-
GET, POST, PUT, DELETE

3.Input :-
headers , body

4.Content type :-
application/json, application/xml

5.Response headers:-
200 OK , 400 Bad Reqest , 500 Server Error

6.Response body :-
application/json , application/xml
-----------------------------------------------------------------------------------------
//RAML is a language for the definition of HTTP-based APIs that embody most or all 
of the principles of Representational State Transfer (REST).
RAML is a human & machine-readable language for the definition of a RESTful 
application programming interface (API).

This document is organized as follows:-
-Basic Information
-Data Types
-Resources
-Methods
-Responses
-Resource Types and Traits
-Security
-Annotations
-Includes, Libraries, Overlays, and Extensions
------------------------------------------------------------------------------------

//A template URI refers to a URI parameter, which is a variable element, enclosed 
in curly brackets ({}) inside a relative URI of a resource.

//title:- Label for the API.

//version:- API version

//baseUri:-  baseUri node specifies a URI as an identifier for the API as a whole.

//baseUriParameters:- The baseUriParameters node has the same semantics and therefore
 MUST follow the same structure as the uriParameters.

//protocols:-  [ HTTP, HTTPS ]

//mediaType:- it's Default Media Types for example:- [ application/json , application/xml ]  --or--  application/json

//documentation:-  reference documentation for the API. Such documents can clarify how
 the API works or provide technical and business context. it contains title & content..

types:

//traits:- A trait, like a method, can provide method-level nodes such as a description,
 headers, query string parameters, and responses. 

//resourceTypes:-  A resource type , can specify security schemes,
 methods, and other nodes. 


//annotationTypes:-  Annotation types, like data types, can extend other data types,
 but annotation types themselves can neither be extended nor used 
 anywhere data types can be used.

(annotationName):-  An annotation is a map having a key that wrap in parentheses() 
is the annotation name, and the value is an instance of that annotation.

//securitySchemes:- Most REST APIs have one or more mechanisms to secure data access, 
identify requests, and determine access level and data visibility.
RAML supports the following built-in security scheme types:-	
OAuth 1.0: 
OAuth 2.0	
Basic Authentication	
Digest Authentication	
Pass Through	
x-{other}


securedBy:- The value assigned to the securedBy node MUST be a list of any of the 
security schemes previously defined in the securitySchemes.

//uses:- Imported external libraries for use within the API.

//relativeUri:- The resources of the API, identified as relative URIs that begin with a slash (/).
A resource node is one that begins with the slash and is either at the root of the API definition or a child of a resource node. For example, /users and /{groupId}.

//usage:- resource type or trait provides instructions about how and when the resource type or trait SHOULD be used. 

//description:- Human-friendly description of the API.

//schemas:-  An alias for the equivalent "types" node for compatibility with RAML 0.8 , always use types ..
-------------------------------------------------------------------------------------------------

//Fragments in RAML:-
Fragments:- API fragments are reusable components of RAML to make the Design and build 
of reusable API even quicker and easier.

API Fragments:- has two types
1. Local
2. Global 

//Fragments Types:-

------------------------------------------------------------------

1.Traits:- here, you can edit query_params , headers fragments

In Traits_fragment:-

 Key-1_Name:
  partIn-root-fragment_paste-here
 Key-2_Name:
  partIn-root-fragment_paste-here  
 

---Below_baseUri-in root_file---

traits:
 Key-1_Name: !include paste_pathOf-- Traits_file-1
 Key-2_Name: !include paste_pathOf-- Traits_file-2


--mention_As--

is: [Key-1_Name , Key-2_Name]

--------------------------------------------------------------
2.Resource-Type here you can edit Methods

---Below_baseUri-in root_file---  
resourcetypes:
 Key_Name: !include paste_pathOf-- Type_file

---mention-inType--
type: Key_Name
  
     or
     |
     |
---mention-inType---> type: !include copy_path of file which is in datatype_folder
--------------------------------
3.Library:- Is collection of data-types

Q.How library refer to raml ?

In Library_fragment:-

usage: Tittle_for usage 
types:
Key_Name:
partIn-root-fragment_paste-here


---Below_baseUri-in root_file---

uses:
  Key_Name: --paste_pathOf-- Library_file

---mention-inType--
type: Key_Name.Paste_

---------------------------------------------------------------------------------
4. Data-Type:- 
// datatype_folder
type:
properties:

//In root_file
types:
Key_Name: !include paste_path

//mention-underBody
body:
Key_Name

//mention-inType
type: Key_Name

    
//mention-inType
 type: !include copy_path of file which is in datatype_folder

--------------------------------------
5.User-Documentation:

// documentation_folder
tittle:
content:

//In root_file
documentation:
Key_Name: !include paste_path


//In root_file
documentation:
tittle:
content:

-----------------------------------------------------------------
6.Example:- 
//In Example folder_file 
example: |  <---or---> value:

//mention as 
example: file_Name

//mention
example: !include copy_path of file which is in example_folder
-------------------------------------------------------------------
7.Annotation-Type
--------------------------------------
8.security_Schemes:-
Whenever we develop a REST_service we apply Security on top of rest APIs.
Security can achieve in several ways, among that we use cofigure SQL certificates on mobile ,
applications or either individually through application or through muleSoft runtime dedicated load
balancer , so that those services will be exposed as HTTPS services.

Apart from that, we also apply security policies on top of these APIs.
Those are like basic authentification, client ID enforcement(injected through headers) and oAuth security policies.


In Security_fragment:-
type: basic authentification/oAuth2.0
description/describedBy:

---Below_baseUri-in root_file---

securitySchemes:
--Key_Name-- basic/oAuth2.0: !include paste_pathOf-- Scheme_file    //this is global Scheme


--mention_As--
securedBy: [basic/oAuth2.0]  //here basic or oAuth2.0 is Key_Name
----------------------------------------------------------------------------------------------------
