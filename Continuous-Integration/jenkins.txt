-------------------------------------------------------------------------------------------------------------------------------------
//Jenkins is web-Application written in java , Jenkins is continuous integration tool that allows continuous development , test and 
deployment of newly created codes...

//continuous Integration Tools:-
1.Bamboo 
2.CI Tools 
3.Jenkins 
4.Buildbot 
5.Travis CI  
6.Jenkins:- Bosch introduce use of cloudBees (enterprise Jenkins company) from Jenkins..
7.Apache Gump

//Featuers of Jenkins
1.Easy installation 
2.Easy configuration
3.Plugins
4.Extensible
5.Distributed 

//Jenkins Pipeline :- continuous integration and continuous Delivery (CI-CD)
development --> code commit --> Build --> Test --> Release --> Deploy/Deliver --> Production.

Jenkins Master (Server)
        |
        |
        |
Jenkins slave (local machine)
------------------------------------------------------------------------------------------
//CICD workflow-
continuous integration: continuous integration is practice that drive development
teams to implement small changes and check in code to version control repositories 
Frequently.
continuous delivery/continuous deployment: continuous deployment automates the 
deployment processs from version control. Developer need not put efforts to deploy..

//Jenkins jobs:
We create jenkins jobs to automate deployment from SCM tool/version control to servers.
After check in code to SCM tool like GITHUB happened then job get's the source code from
SCM tool..
We can create jenkins job Pipelines in two ways:
1. Scripted Pipeline
2. Declarative Pipeline
configure pipeline to build , execute Munit test and deploy..
---------------------------------------------------------------------------------------------
//Two ways to trigger jenkins jobs automatically:
*1. Push notification: SCM tool (GITHUB) notifies jenkins on new commit pushes...
 2. Polling: jenkins polls in regular schedules...

*1. Push notification: 

//go to repository settings of github ---> Webhooks
payload url: https://paste_hoste_here/github-webhooks/

#just push event (active)
Add webhook

In jenkin project
Build trigger: select ---when we wann webhooks---> github hook trigger for GITScm polling..

//NG-Rok:
Ngrok works by creating a secure tunnel to your local server and assigning it a unique
URL that can be accessed globally. It encrypts the traffic between your local machine 
and the internet, ensuring security while exposing your local server to the outside 
world...

Install and signup ngrok command prompt:

ngrok.exe --version
ngrok config add-authtoken 2esDlb <-- it's token
ngrok.exe http:8080 <---- paste_port_here  | ngrok tcp :3306
ngrok http http://localhost:8080 
forwanding:    <------- from ngrok and save it



 //Error: authentication failed: Your account is limited to 1 simultaneous ngrok agent sessions.
Solution:  taskkill /f /im ngrok.exe
----------------------
//In github repository settings
 Webhooks
 Add webhooks: paste path of ngrok here /github-webhook
Select events: pushes
----------------------
              2. Polling: 
              //In jenkin project
              Build trigger: select build perodically  (use cron expression generator)
              https://crontab.cronhub.io/

//Always use Push notification
-----------------------------------------------------------------------------------------
//Freestyle project
#source code management
Git
Repository URL:  paste git repo url paste_here
Credentials: 
Add 
give Git password | Personal access tokens | id: git

#Build
Invoke top-level Maven targets?:
Goals: clean deploy -Penvironment -DmuleDeploy
-------------------------------------------------------------------------------------
//Maven project
Manage plugins ---> Available ---> Maven integration plugin download it 
Manage jenkins ---> Global Tool configuration ---> Maven: set installation and version

#Build
                                    Root POM: paste pom.xml path here  <--- is optional
Goals and options:
 clean deploy -PSandbox -DmuleDeploy
-------------------------------------------------------------------------------------

//Jenkins pipeline allows us to define set of stages while continuous deployment,
we can define stages to execute continuous deployment stage by stage..

Declarative Checkout SCM ---> Build ---> Test ---> Deployment

//Step1: Choose pipeline
Defination: Pipeline script from SCM
--Choose--> SCM : Git
Repository URl: paste git repo here
Script path: Jenkinsfile  (create file in studio)
//Step2: create Jenkinsfile in studio  https://alc.workshops.mulesoft.com/alc-workshop/4.5.0/module7/module7_lab4.html

//Step3: provide maven plugin in pom.xml https://docs.mulesoft.com/munit/latest/munit-maven-plugin
<plugin>
      <groupId>com.mulesoft.munit.tools</groupId>
      <artifactId>munit-maven-plugin</artifactId>
      <version>${munit.version}</version>
      <executions>
        <execution>
          <id>test</id>
          <phase>test</phase>
          <goals>
            <goal>test</goal>
          </goals>
        </execution>
      </executions>
    </plugin>

 MUnit provides a Maven plugin that enables you to run your MUnit tests as part of
  your continuous integration environment...

//Step4: Download maven plugin in jenkins tool..
//step5: Add  Mulesoft enterprise Repository in settings.xml
---------------------------------------------------------------------------------------
//Step1: Choose pipeline
Defination: Pipeline script 
Script : write groovy script in editor.. add stage as Scripted pipeline for git repositories
----------------------------------------------------------------------------------------------
//Github with jenkins
By two ways we can access private repository:
1. Personal Access Token
2. SSH Keys

1. Personal Access Token:
click on profile ---> settings ----> Developer settings ---> Personal access Token
--select--> Tokens(classic) ---get help by authentification mobile app---> Note: PAT_jenkins

Jenkins---> credentials + Add --->Domain: global---> kind: userName & password |
username: github userName |  password: paste token | ID: paste token id

Add build step: Invoke Top level maven target ----> Goals: clean deploy -P -DmuleDeploy

----------------------------------------------------------------------------------------

