////////////////////////////////////////////////////////////////////////////////////////


Version control systems (VCS) categorized into two main types:-
centralized version control systems (CVCS) and distributed version control systems (DVCS).

Centralized Version Control System (CVCS):
Developers check out files from this central repository, make changes locally, and then commit their changes back to the central server. 
Examples of centralized version control systems include CVS (Concurrent Versions System) and SVN (Apache Subversion).
Single point of failure (if the central server goes down, it can disrupt collaboration).

Distributed Version Control System (DVCS):
In a DVCS, each developer has their own complete copy (clone) of the repository, including the entire version history. 
Changes can be made locally and committed to the local repository without needing a constant connection to a central server. 
Developers can later synchronize their changes with others by pushing and pulling from remote repositories. 
Git is the most widely used distributed version control system.

/////////////////////////////////////////////////////////////////////////////////////////

//Git and GitHub:-

working repositery --add to track--> staging/index Area --commit to save--> Git local repositery --push to send--> GitHub Remote repositery .
GitHub Remote repositery --clone to pull--> working repositery .


// Git commands :-

Git configuration:- 
git config --global.email "bharatchim17@gmail.com"
git config --global.name "bharatchim17"
-------------------------------------------------------------------------------------------------

pwd --> current project location
git init --> Initialized empty Git repository in Drive:/folder/.git/
git status --> show track , untrack and commit files
git add --tab--> it add mentioned file ..
git add . git add * --> it add all files in folder.
git commit -m "comment"
git log --> show author information and detail history of committed file.
git rename_branch --> git branch -M branch_Name 
git remote
git push -u origin main / git push -u origin branch_Name

--------------------------------------------------------------------------------------
//To comapre differece between  
working repositery   ---->  Staging/index Area 
staging/index Area   ---->  Git local repositery
Git local repositery ---->  GitHub Remote repositery....
we use git diff command :- 

git diff file_Name 
git diff HEAD file_Name
git diff --staged HEAD file_Name
git log --online ------> showing file in local repository i.e. files which is commited
git diff commit_id file_Name 
git diff --staged commit_id

--------------------------------------------------------------------------------------- 
 a/index.txt  --> Represent Source 
 b/index.txt  --> Represent destination 

 ---a/index.txt  --> Represent Source file missing some line 
 +++b/index.txt  --> Represent new line added in destination file

HEAD :- Represent last commit
_file_Name (space before file_Name) indicates unchanged file.
-------------------------------------------------------------------------------------
//Remove staged files :-
ls --> show files in working directory
git ls-files --> show files in staging Area

git rm --cached file_Name --> will delete all files from staging area..
git reset file_name ---> will reset , discard changes from staging area(opposite of add command)..

//For reset commit we have 3 mode i.e. mixed | soft | hard
git reset <mode> <commit-id>
ls --> show files in working directory
git ls-files --> show files in staging Area
git log --online ------> showing file in local repository i.e. files which is commited
git reset --mixed acb9d2c  <---- is previous commit id..
git ls-files

1. reset with --mixed mode:
it's default mode to discard commits in local repository (local repository come after we commit)
 and to discard it in staging area (staging area come after we add) , it will not touch working directory..

2. reset with --soft mode:
 To discard commits in local repository (local repository come after we commit), it will 
 not touch working directory as well as staging area...just we have commit to revert back..

3. reset with --hard mode:
 To discard commits in local repository (local repository come after we commit),
 in staging area (staging area come after we add), as well as in working directory also..
---------------------------------------------------------------------------------------
//Don't use regular:-

   git rm file_Name --> will , delete files from all stages.
   git rm -r        --> will , delete files from all stages.
---------------------------------------------------------------------------------------
//git checkout command:-
we can use checkout command to discard unstaged changes in tracked files of working
directory...
git checkout -- file_name  ---> will undo changes...
-----------------------------------------------------------------------------------------









/////////////////////////////////////////////////////////////////////////////////////
chapter7 is skipped
