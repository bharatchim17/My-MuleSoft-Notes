-----------------------------------------------------------------------------------
//Error handling:-
The process of handling errors in flow and responding back user friendly messages 
instead of system error messages is known as error handling.

Selector Expressions for Mule Errors:-
1. #[error.description]
2. #[error.detailedDescription]
3. #[error.errorType]
4. #[error.cause]
5. #[error.errorMessage]
6. #[error.childErrors]

---------------------------------------------------------------------------------------
//Error types :-

Any and Critical

Any :- 
1. unknown 
2. transformation
3. routing
4. connectivity ----- has one type 1.retry_exhausted
5. expression
6. security     ----- security has two types 1.Client_Security & 2.Server_Security

Critical :-
1. fatal
2.overload

//Error type is combination of : name_space: identifier

-----------------------------------------------------------------------------------------


// in java there is try catch statement when error occure in try statement it will be 
catch it in catch statement , like these function anypoint studio provided try scope(by right click wrap in --> try scope)..

//every handler (except the last one) within an error-handler must be specify 'when' or 'type' attributes..

-------------------------------------------------------------------------------------------------------------------
//On Error Continue:- Considers the request transaction as Success-response and 
response back to the response section of  response back to the error section of listner..
..
//On Error Propagate:- Considers the request transaction as Error-response  and
 response back to the error section of listner..
//When we have API kit router with HTTP listner , we should use /* at the end of sub-path
---------------------------------------------------------------------------------------------------
//Mule Project naming standards and structure:-
1.Project name:- kebab case 
example ---> project-name

2. file names:- kebab case 
example ---> file-name

3.flow and subflow names: kebab case
example ---> subflow-name

4.json/xml fields names:-  camel case 
example ---> streetAddress

5.variable name:- camel case
example ---> variableName

6.conmector/component name :-  First later capital and space between words
example ---> Transform Message

--------------------------------------------------------------------------------------------
//Manual deployment:- right click on project ---> Anypoint platform ---> choose environment 
--give Project_Name--> deploy application
---------------------------------------------------------------------------------------
//Mule Properties management:-
 Externalizing Properties from mule configuration help us in better
code management and need not to touch applications on configurations property changes.


1. Create property(.properties) file or yaml_file(.yaml) in src/main/resources.
   
    OracleDatabase:
            host: "localhost"
            port: "1521"
            userName: "system"
            password: "chimbh17"
            serviceName: "XEPDB1"

     httpListener:
          port: "6061"
          host: "localhost"
          readTimeOut: "30000"
          basePath: "/learnmulesoft" 

  
2. Create "configuration properties" global element.
---> load the file


3/4. Use ${key} expression extract the Property from Property file or yaml file..

        //In Database config:
            host =  ${OracleDatabase.host}
            port =  ${OracleDatabase.port}
            username = ${OracleDatabase.userName}
            password = ${OracleDatabase.password}
            service name = ${OracleDatabase.serviceName}
  



4/3. Use Mule::p('key') dataweave script to extract in dataweave(--click--> fx)

-------------------------------------------------------------------------------------
//Secure configuration properties:-


1. Create property(.properties) file or yaml_file(.yaml) in src/main/resources.
            OracleDatabase:
                  host: "localhost"
                  port: "1521"
                  userName: "system"
                  password:  "![paste_generated-password]"
                  serviceName: "XEPDB1"
                

2.Encrypt password property values:-
https://secure-properties-api.us-e1.cloudhub.io/

   - Choose 16 digits encryption key:-  abcdef0123456789
   - Use alogorithm and mode to encrypt password using above key

3. Create "Mule secure configuration property" global element.
--->  file: load the file   key: paste_here

4/5. Use ${secure::key} expression extract the Property from Property file or yaml file..

 //In Database config:
 
        host = ${secure::OracleDatabase.host}
        port =  ${secure::OracleDatabase.port}
        username = ${secure::OracleDatabase.userName}
        password = ${secure::OracleDatabase.password}
        service name  = ${secure::OracleDatabase.serviceName}


5/4. Use Mule::p('secure::key') dataweave script to extract in dataweave(--Click--> fx)

 //Mule::p('secure::db.Key_Name.password') is for descrypt value during runtime

--------------------------------------------------------------------------------------
//Environment:-
            DEV 
            PROD 
            TEST 
            UAT
//Load property files dynamically by environment:-

global element tab ---> secure properties config ---> file: ${env}.yaml  key: ${enc.key} 
global property ---> name: env |  value: dev  

--right_click-on_project---> Run As ---> Mule Application (configure) ---> Arguments--->
program Arguments:
-Denv=dev/test
-Denc.key=paste_key_here
----------------------------------------------------------------------------------
//Runtime to cloudHub 1.0

Right_click on project ---> deploy to cloudHub ---> deploy to cloudHub

//worker size:- is memory example --> 0.2 vCores 1GB memory..
The process of increasing this worker size from one value to higher is called as vertical
scaling..
//worker :-  example--> 1 , 2 , 3
The process of increasing this worker size from one value to higher is called as horizontal
scaling...

//In properties:-
key: env        value: dev/test/uat
key: enc.key    value: abcdef0123456789

//In Logging:- choose info/debug

//Hiding fields in runtime manager property section
--example--> In mule-artifact.json write "secureProperties" : ["enc.key"]

//In insight we know , How much time process taking for each transaction..
//How to make alerts..?
-----------------------------------------------------------------------------------------
//Mule API management:-
Is the process of designing , publishing , documenting , analyzing , versioning ,
securing and managing API users,traffic,SLAs.
Mulesoft has provided API management in two areas:
1. Mule Gateway API management
 - Mule Gateway
2. Universal API Management
 - Flex Gateway
 - Service Mesh

 -----------------------------------------------------------------------------------
 //Auto discovery:-
 Is the process of allowing API manager application to discover the application is running in
 the runtime using instance , ID is known as auto discovery..
 To enable auto discovery follow below steps:
 1. create auto discovery global element using API instance id.
 2. provide below runtime properties:
  - Organization buisness group client_id
  - Organization buisness group client_secret
 

----------------------------------------------------------------------------------------------------
//Client id enforcement  policy:-
The client ID Enforcement policy restricts access to protected resource by allowing requests
only from registered client applications. The policy ensure that client credentials sents on 
each request have been approved to consume the API.

1. register client application on API in exchange.

2. specifies from where in the request to extract values:

  - HTTP Basic Authentification Header: Requires credentials as part of the authorization header.
 The application consuming the API must use the basic Authentification scheme to send the 
 credentials in the requests.
  - Custom Expression: Accepts an expression each for client_id and client_secret in the headers,
  indicating where to extract the credentials from request.
---------------------------------------------------------------------------------------------
//Rate limiting policy:-
The Rate limiting policy enables you to limit the number of requests that an API can accept within
a time window. The API rejects any request that exceeds this limit .
You can configure multiple limits with window sizes ranging from milliseconds to years.

1. Apply configuration to all API method & resources.
2. Apply configuration to specific API method & resources.
---------------------------------------------------------------------------------------
//Rate limiting SLA based policy:-
The rate limiting policy is combination of rate limiting and client id enforcement that enables you to 
limit the number of request specified by the level of access granted to the requesting application.
 1. Apply configuration to all API method & resources
 2. Apply configuration to specific API method & resources
 //steps:
 1. Add SLA tiers
 2. Create client Applications
 3. Apply rate limiting SLA based policy 
-------------------------------------------------------------------------------------------
JSON & XML threat protection policy:-

Applications processing JSON and XML requests are susceptible to attacks characterized 
by unusual inflation of elements and nesting levels. Attackers use recursive techniques
to consume memory resources. Dramatic swings in the size of the application data often 
 single a security problems. the JSON threat protection policy helps protect your applications 
 from such intrusions.
 If you find that attacks on your Anypoint platform setup are difficult to detect , design your services
 architecture with layers of protection in addition to JSON threat protection..
---------------------------------------------------------------------------------------------------
//IP allow list & IP block list policies:-
The IP allow list policy allows a list or range of specified  IP address access to a protected
resource when a match is found between a source IP (specified when configuration the policy) and
a list of individual IPs or range of IPs.

The IP allow list policy controls access to a configured API endpoint from either a single 
IP address or range of IP addresses.

The IP Blocklist policy restricts access to a protected resources when a match is found between source IP 
(specified when configuring the policy) and either a list of individual IPs or range of IPs.

The IP blocklist policy controls access to a configured API endpoint from either 
a single IP address or range of IP addresses.

  1. Apply configuration to all API method & resources.
  2. Apply configuration to specific API method & resources.
------------------------------------------------------------------------------------------
//Proxy API:-
proxy API is a wrapper on actual application , we can go proxy API's in below scenarios.
  - When we would like to expose wrapper/proxy API on external services with own API management..
  - When we would like to expose with different end point on our mule applications..
  - When we would like to apply set of other policies on same services..
----------------------------------------------------------------------------------------------

