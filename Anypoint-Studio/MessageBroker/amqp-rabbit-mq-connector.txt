-------------------------------------------------------------------------------------
//Rabbit MQ
Messaging broker that implements Advanced Message Queuing Protocol(AMQP) its , based 
on erlang language..
Producer ---> Exchange ---> Queue ---> Consumer
Open RabbitMQ command prompt and run below commands:
- rabbitmq-plugins.bat list
- rabbitmq-plugins.bat enable mention_plugine_here (rabbitmq_management)

localhost: 15672 is default port of Rabbit-MQ
userName: guest 
password: guest

//Overview of Rabbit MQ:
- It based on AMQP(Advanced Message Queing Protocol)..
- It support multiple Protocols..
- It Enable loosely coupled messaging based integration
- It equipped with fault tolerence(FA) , high availability(HA) , scalability..

//What is loosely coupled (Dcopled)..?
Loose coupling is an approach to interconnecting the components: in a system , network 
or software application so that those components, also called elements, reducing the 
risk that changes within one module will create unanticipated(not expected or not predicted) 
changes within other modules... 

//RabitMQ core concepts:
- Message
- Message Producer
- Exchange
- Queues
- Consumers
- Binding & Routing keys

//RabbitMQ exchange Types:
- Direct
- Fanout***
- Topic
- Headers 
                                      //Subcategories RabbitMQ exchange Types:
                                        - Default 
                                        - Dead Letter

----------------------------------------------------------------------------------
//AMQP Operations:

1. Ack
2. Consume
3. Listner (source)
4. Publish
5. Publish consume
6. Reject
-------------------------------------------------------------------------------------
1. Ack: 
Operation that acks a message with the delivery tag..
#General
Ack id : #[vars.ackId]  <----- This is ack_id connector
In set variable component Name: ackId  | value: attributes.ackId
--------------------------------------------------------------------------------
2. Consume:  
Operation that allows the user to consume a single AmqpMessage from a given Queue.
-------------------------------------------------------------------------------------------
3. Listner: AMQP Listener for Queues, allows to listen for incoming messages.
#General:
Queue_Name: paste_Queue_Name_here 
Fallback queue definations: None ✅ | Edit inline | Global reference
Inbound Content-Type: application/json
Ack Mode: IMMEDIATE | EMPTY | MANUAL | AUTO
-----------------------------------------------------------------------------
4. Publish: Operation that allows the user to publish a single AmqpMessage to a given 
exchange...
#General:
Exchange Name:  
Routing keys: Edit inline ✅ | Expression or bean reference | None
value: 1 
------------------------------------------------------------------------------------
5. Publish consume:
Operation that allows the user to send a message to a AMQP Exchange and waits for a 
response either to the provided replyTo destination or to a temporary destination 
created dynamically...
--------------------------------------------------------------------------------
6. Reject: 
Operation that allows the user to reject a delivered AmqpMessage.
#General
Ack id : #[vars.ackId]  <----- This is ack_id connector
In set variable component Name: ackId  | value: attributes.ackId
---------------------------------------------------------------------------------
//How to Install RabbitMQ Locally with Docker..?
https://hub.docker.com/_/rabbitmq
-----------------------------------------------------------------------------------