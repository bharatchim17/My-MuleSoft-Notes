--------------------------------------------------------------------------------------------------------------------
//The Jakarta Messaging API (formerly Java Message Service or JMS API) is a Java 
application programming interface (API) for message-oriented middleware... 

//Java Messaging Service (JMS) 
In integration world after webservices , the JMS publish subscribe model used mostly 
to make asynchronous integrations..
We usually create Queues and Topics in JMS server to publish the message.. 

//Queue & Topic is pipeline where we can publish the payload so , it can be subscribed by clients
 

1. JMS Queue:  Publisher ---> Queue ---> Subscribe 
Exchange of messages happens between single sender (producer) and single receiver (Consumer)
via queue. In case of multiple (consumers) are trying to pick up the message from queue ,
only one consumer will be able to pick up the message at a time(Queue is point to point: 1 to 1)....       

2.JMS Topic: Publisher ---> Topic <--Bridge--> distrubuted to multiple Queue ---> Subscriber
When publisher sends message to topic , all subscribers are subscribed to topic , will
receive the message (publish & subscriber i.e. PubSub model: 1 to many)..

//Addvantages:
1. Asynchronous: 
To receive the message, client is not required to send request. Message will arrive automatically to the client. 
2. Reliable: 
It provides assurance that message is delivered...
3. it easy to develop enterprise applications that asynchronously send and receive business data and events...
--------------------------------------------------------------------------------------
ActiveMQ is a popular open source messaging service that is built on top of Java.
It works as a message-oriented middleware (MoM).
  
apache-activemq-5.17.6\bin\win64 <---- in this path type cmd & give command activemq.bat strat
localhost: 8161 is default port of ActiveMQ
userName: admin 
password: admin
------------------------------------------------------------------------------------
//Following are JMS elements:
1. Providers
2. Client 
3. Producer/Publisher
4. Consumer/subscriber
5. queue
6. topic
7. message
----------------------------------------------------------------------------------------
//Global elements
#Configure an ActiveMQ Connection: 
Connection: there are 3 types of Connection
1. ActiveMQ Connection ✅ 
2. No Connectivity Test Connection
3. Generic Connection

Conection Factory: Edit inline  
broker url: tcp://localhost:61616 | tcp://0.0.0.0:61616 (we can find it in cmd or in activeMq.xml)..


-----------------------------------------------------------------------------------
//JMS Operations

1. Ack 
2. Consume
3. On New Message  (Source)
4. Publish
5. Publish Consume
6. Recover session
---------------------------------------------------------------------------------------
1. Ack: Allows the user to perform an ACK when the AckMode#MANUAL mode is elected while 
consuming the Message. As per JMS Spec, performing an ACK over a single Message 
automatically works as an ACK for all the Messages produced in the same JmsSession...
#General
Ack id fx : vars.ackId  <----- This is ack_id connector
In set variable component Name: ackId  | value: attributes.ackId
--------------------------------------------------------------------------------------
2. Consume: Operation that allows the user to consume a single Message from a given
Destination...
#General:
Destination: Queue_Name | Topic_Name
Consumer Type: Queue Consumer | Topic Consumer
---------------------------------------------------------------------------------------
3. On New Message: JMS Subscriber for Destinations , allows to listen for incoming 
Messages..

#General:
Destination: Queue_Name | Topic_Name
Consumer Type: Queue Consumer | Topic Consumer
Inbound Content-Type: application/json
Number of Consumers:      <--------      for Queue i used 1 , 4  | for topic i used  1
Acknowledge Mode: IMMEDIATE | dUPS_OK | EMPTY | MANUAL | AUTO

https://docs.mulesoft.com/jms-connector/latest/jms-ack
------------------------------------------------------------------------------------
4. Publish: Operation that allows the user to send a Message to a JMS Destination..

#General:
Destination: Queue_Name | Topic_Name
Destination Type: Queue | Topic
--------------------------------------------------------------------------------------
5. Publish Consume: Operation that allows the user to send a message to a JMS 
Destination and waits for a response either to the provided Reply To destination or to 
a temporary Destination created dynamically..
#General:
Destination: Queue_Name | Topic_Name
request-reply-pattern: CORRELATION_ID ✅ | MESSAGE_ID
Inbound Content-Type: application/json

Reply to: edit inline ✅ | expression or bean reference
Destination name: Queue_Name | Topic_Name
Destination Type: Queue | Topic

Persistent delivery: true | false | expression
Maximum wait/unit: 30/sec
----------------------------------------------------------------------------------------
6. Recover session: Allows the user to perform a session recover when the 
AckMode#MANUAL mode is elected while consuming the Message. As per JMS Spec, 
performing a session recover automatically will redeliver all the consumed messages 
that had not being acknowledged before this recover...
----------------------------------------------------------------------------------------
//The message we are Publishing to default are of transient so , it will be disapeare
if message failed..to avoid it make it persistent..
# Persistent Delivery: ✅

//Dead Later Queue(DLQ): Means message not process successfuly.."back out"..

//Persistent vs Non-Persistent:
persistent: Log the message to stable storage..
non-persistent: Does not required message logged to stable storage..
------------------------------------------------------------------------------------