---------------------------------------------------------------------------------------
//Error handling:-
The process of handling errors in flow and responding back user friendly messages 
instead of system error messages is known as error handling...

Selector Expressions for Mule Errors:-
1. #[error.description]
2. #[error.detailedDescription]
3. #[error.errorType]
4. #[error.cause]
5. #[error.errorMessage]
6. #[error.childErrors]

---------------------------------------------------------------------------------------
//Error types:-

Any and Critical

Any :- 
1. unknown 
2. transformation
3. routing
4. connectivity ----- has one type 1.retry_exhausted
5. expression
6. security     ----- security has two types 1.Client_Security  &  2.Server_Security

Critical:-
1. fatal
2. overload

//Error type is combination of : name_space: identifier

------------------------------------------------------------------------------------------------------
// in java there is try catch statement when error occure in try statement it will be 
catch it in catch statement , like these function anypoint studio provided try scope(by right click wrap in --> try scope)..

//every handler (except the last one) within an error-handler must be specify 'when' or 'type' attributes..

------------------------------------------------------------------------------------------------------
//On Error Continue:- Considers the request transaction as Success-response and 
response back to the response section (success response) of listner..

//On Error Propagate:- Considers the request transaction as Error-response  and
 response back to the error response section of listner..
//When we have API kit router with HTTP listner , we should use /* at the end of sub-path..

//Global error handler, also known as global exception strategy , is an error handling mechanism that
allows you to define a centralized error handling strategy that applies to all flows within Mule application.. 

//Raise Error:-
Is used to intentionally throw an exception or error within flow..
---------------------------------------------------------------------------------------------------
//Set in variable of transform message of flow:

attributes.headers.'x-correlation-id' default "" save in variable name as correlationId..
attributes.headers.'x-transaction-id' default uuid() save in  variable name as transactionId..
payload save in variable name as inputPayload

//set code as variable in transform message:
Example:
error code 400 | 200
save in  variable name as statusCode now mention it in 
http listner 
#response fx: vars.statusCode 

//set in payload of transform message of Error_Handling:

%dw 2.0
output application/json
---
{
"code": 400/503/500,
"message" : bad request/service unavailable/internal server error ,
"description" : error.errorMessage.payload.message[0] as String ,
"datetime": now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"} ,
"transactionId" : vars.transactionId
}


//Where as 500 is internal server error work as default error handling --use--> type: ANY 

//Default response in http listner Success response: 200 , error response: 500 ...
go to httpListener's Response ---> Body: payload | status code: vars.statusCode default 200 to success response
-------------------------------------------------------------------------------------------
//Custom error:-
error mapping ---> choose error ---> namespace: CUSTOM | identifier: CONNECTION_FAILED
Now in ---on error propogate --choose-->  CUSTOM:CONNECTION_FAILED

//Raise error:-
General ---Settings---> Type: CUSTOM:CASE_NOT_FOUND  | Description: The server has not found anything matching the Request-URI  
Now in ---on error propogate --paste-->  Type: CUSTOM:CASE_NOT_FOUND 

//We can use Raise error connectors to handle custom connectors.. 
---------------------------------------------------------------------------------------
note:- use Private flow for error handling instead of subflow in subflow we use try block for error handling..

//try scope: allow us to error handling on group of event processor individually..
--------------------------------------------------------------------------------------
//Global error handler:-
1.Create configuration file name as global-error-handler and add error to it by using 
error handler connector
2.Create "configuration" global element..
3. Default error handler: --choose--> global-error-handler
4. --goto--> http listener ---> responses ---> error response--->
Body: payload
statusCode: vars.statusCode 

--------------------------------------------------------------------------------------
Click-On-->Error Handling--->Reference: --choose-->global-error-handler
Global-configuration--->configuration--default error handler--->choose file
--------------------------------------------------------------------------------------
//Solution to solve conflict b/w global  vs local & connector level error handlers
1. use private flow refer it by flow reference or API kit router and add error 
handler in error handling don't refer it to global..
2. refer error handler in main flow instead of private flow...
--------------------------------------------------------------------------------------
//We can know exact error sometimes by ---> error.exception.message
-----------------------------------------------------------------------------------
//Details global Error examples informations:

1. APIKIT: BAD_REQUEST: 
This error type usually generated by API based project but moved the same to global 
error handler to maintain it as unique , This handles bad request over request i.e. it executes when invalid 
request payload sent over http request. API Kit Router can able 
validate the request against to RAML.... 

2. APIKIT: METHOD_NOT_ALLOWED:  
This error type usually generated by API based project but moved the same to global error 
handler to maintain it as unique.. 
It executes when invalid method has sent over http request. API Kit Router can able 
validate the request against to generated flow method...

3. APIKIT: NOT_ACCEPTABLE: 
This block handles when The resource identified by the request is not capable of generating 
response entities according to the request accept headers...
 
4. APIKIT: NOT_FOUND: 
This block will execute if the server not found anything that matching to the request URI... 
 
5. APIKIT: UNSUPPORTED_MEDIA_TYPE: 
This block will execute when the given request is not supported in any of predefined 
format and hence the server will refuse the request... 
 
6. HTTP: BAD_REQUEST: 
This block will execute when server will not process the request due to either 
malformed requests or invalid request messaging formats...
 
7. HTTP: FORBIDDEN: 
This block will execute when server refuses the request because of authorization 
issues. There might be multiple reasons why server is refuses the request will be 
shown as part of response payload... 
 
8. HTTP: CLIENT_SECURITY: 
This block indicates an external entity (e.g., calling an external endpoint) produced a security error. 
 
9. HTTP: CONNETIVITY: 
This block executes when upstream is not available to handle the requests... 
 
10. HTTP: INTERNAL_SERVER_ERROR: 
This block will execute when any un expected condition that occurred during the flow 
to full the request...  

11. HTTP: METHOD_NOT_ALLOWED: 
This block will execute when method specified in the given request is not allowed... 
 
12. HTTP: NOT_ACCEPTABLE: 
This block handles when client error response code indicates that the server cannot 
produce a response matching the list of acceptable values defined in the request's 
proactive content negotiation headers, and that the server is unwilling to supply a 
default representation... 
 
13. HTTP: NOT_FOUND: 
This block will execute when sever unable to find the matching request URI... 
 
14. HTTP: PARSING: 
This block will execute when an HTTP request parser. It takes chunks of text as 
received and returns a 'hint' as to what is required, or returns the http: Request 
when a complete request has been read... 
 
15. HTTP: RETRY_EXHAUSTED: 
This block handles when The request is unable to interact with external application 
and exhausted the given retries to connect to external application... 
 
16. HTTP: SECURITY: 
This block indicates a security error occurred, like invalid credentials being 
received or an expired token being used... 
 
17. HTTP: TIMEOUT: 
This block will execute when the given request for external application is not 
responded in given interval of time timeout exceptions will occurred... 
 
18. HTTP: TOO_MANY_REQUESTS: 
This block will execute when request throws 429 response status code indicates the user has sent 
too many requests in a given amount of time... 
 
19. HTTP: UNAUTHORIZED: 
This block will execute that the request has not been applied because it lacks valid 
authentication credentials for the target resource... 
  
20. HTTP: UNSUPPORTED_MEDIA_TYPE: 
This block will execute when the server refuses to accept the request because the 
payload format is in an unsupported format... 
 
21. STREAM_MAXIMUM_SIZE_EXCEEDED: 
This block will execute when the buffer uses the more size than configured...  
 
22. RETRY_EXHAUSTED: 
This block will indicate that retries of a certain execution block have been exhausted.
For example, for a given operation, or using Until Successful Scope... 
  
23. REDELIVERY_EXHAUSTED: 
This block indicates that max attempts to reprocess a message from a source have been 
exhausted...  
 
24. CONNECTIVITY: 
This block indicates that there was a problem establishing a connection. This could 
occur while using a connector, for example, an HTTP requester.. 
 
25. TIMEOUT: 
This block indicates timeout occurred while processing a message... 
 
26. TRANSFORMATION: 
This block indicates an error occurred while transforming a value. This involves Mule 
Runtime internal transformations and not Data Weave transformations.. 
 
27. EXPRESSION: 
This block indicates an error occurred while evaluating a Data Weave expression... 
 
28. ROUTING: 
This block indicates an error occurred while routing a message... 
  
29. SECURITY: 
This block indicates a security error occurred, like invalid credentials being 
received or an expired token being used...  

30. ANY: 
This block executes if any other error occurs out of handled above...
------------------------------------------------------------------------------------- 
 


 
 
 

 
 
 
 
 

 
 

 
 
 

 
 
 

 
 

 
 
 
 
 

 

 
 
 
 

 
 
 
 
 
