---------------------------------------------------------------------------------
//Database operations:
1. Bulk delete
2. Bulk insert
3. Bulk update
4. Select
5. Insert
6. update
7. Delete
8. On Table Row (source) <--- schedular
9. Query Single
10. Store procedure
11. Execute DDL
12. Execute Script
-------------------------------------------------------------------------------------
1. Bulk delete: 
using one single Database statement, which has performance advantages compared to 
executing one single delete operation various times...
#General:
Input parameters: #[payload]  (default)
SQL query Text: 

2. Bulk insert:

3. Bulk update:
-----------------------------------------------------------------------------------
4. Delete: 
//How can we give input parameters to queries for database component ?
#General:
SQL query Text: 
VALUES(:key1 , :key2 , :key3) ;      // this is placeholder :key

Input parameters: 

                    #[
                     %dw 2.0
                    output application/json
                    ---   
                    {
                    key1: payload.keyName ,            
                    key2: payload.keyName , 
                    key3: payload.keyName
                    }]  


5. Select:
Selects data from a database. Streaming is automatically applied to avoid preemptive 
(If something is pre-emptive, it is done before other people can act, especially to 
prevent them from doing something)
consumption of such results, which may lead to performance and memory issues...

//What is preemptive consumption in select operation..?

6. Query Single:
Selects single result from a database. If the indicated SQL query returns more than 
one record, only the first one is returned. Streaming is not used for this operation, 
which means that we must be careful because all selected fields will be loaded to 
memory...

7. update:
8. Insert:
------------------------------------------------------------------------------------
9. Store procedure:
Invokes a Stored Procedure on the database. When the stored procedure returns one or 
more ResultSet instances, streaming is automatically applied to avoid preemptive 
consumption of such results, which may lead to performance and memory issues...
#General:
SQL query Text: 
Input parameters:
In out parameters: None | Edit inline | Expression
output parameters: None | Edit inline ✅ | Expression

#General:
SQL query text:
#[{
    call insert_covid_master(:source, :case_type, :first_name, :last_name, :phone, 
    :email, :date_of_birth , 
:national_id, :national_id_type, :street_address, :city, :state, :postal)
}]


-----------------------------------------------------------------------------------------


 1. We can make use of auto generated keys features on top of database...
Database(Insert-operation) component ---> Advance ---> 
Auto generated keys = true✅| false (default) | Expression 
Auto generated key columnNames  = edit inline✅|Expression or Bean reference | none
 + --provide--> columnNames as case_ID Value: case_ID

//To read payload in java-stream objects ---> 
evaluate: write(payload , "application/json")

 2. We can write a stored procedures which will take all fields as input and insert 
 into the database , then return us generated case_id..
Database(stored-procedure) 
#General: 
inout parameters: none 
output parameters: edit inline
+ provide --->  output parameters = key: case_id & type: Integer

// In database case ID is of auto generated  which is primary key. but , same payload 
can come multiple times so , we need to give max(case_id here case id is primary key) 
to DB which will give us the latest case id.. 
we use select operation in anypoint studio for this task write in select query-text:- 
 use max function.. 
 
 //How to write max-function in sql..?
 
----------------- --------------------------------------------------------------------
10. Execute DDL: 
Enables execution of DDL queries against a database...
#General:
SQL query Text:
                        CREATE TABLE inventory (
                            id INT PRIMARY KEY,
                            product VARCHAR(50) UNIQUE,
                            quantity INT,
                            price DECIMAL(18,2)
                        );
//What is DDL..?
-----------------------------------------------------------------------------------
6. Execute Script:
Executes a SQL script in one single Database statement. The script is executed as 
provided by the user, without any parameter binding..
#General:
SQL query Text:
Script path: <-------- path of .sql file

-----------------------------------------------------------------------------------
8. On Table Row: 
Triggers a message per each row in a table..
#General:
Scheduling stratergy:  Fixed Frequency ✅ | Corn 
Frequency: 
Start delay:
Time unit: 
Table: <--- fetch table
Watermark column: <--- fetch column we select  Watermark to primary key
Id column: <--- fetch id column
Since:

-----------------------------------------------------------------------------------
// Database call give us java base response as outcome and payload will be vanished 
after going to DB ---> to solve this we need to set variable component
in flow or save payload as variable..
---------------------------------------------------------------------------------------
// To point any value or expression dynamically over SQL query text:-  
In Set varible:
#General:
Name: reportsDynamicQuery
value:
#[
if(!isEmpty(attributes.queryParams.state)) (
	"select count(*) as count, case_type, state from cvd_case_master where upper(state) = " ++ 
    upper(attributes.queryParams.state) ++ "' group by case_type, state"
) else (
	"select count(*) as count, case_type, state from cvd_case_master group by case_type, state"
)]

In Selet query:
query text:  #["$(vars.Dynamic_Query)"]

//What is dynamically means here..?
----------------------------------------------------------------------------------------
To apply connection poolling:- 

Global Element ---> search: Database-config 
Advance Tab    ---> pooling profile : Edit inline ✅ | None| Bean reference
Configure      ---> Max pool size: | Min pool size:   | Acquire increment:
 ---> Ok & Save...

//In which scenario we need to use connection pooling..?
------------------------------------------------------------------------------------------- 
